<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>holdfire</title>
  
  <subtitle>学无止境，不忘初心！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://holdfire.github.io/"/>
  <updated>2019-11-11T17:46:20.891Z</updated>
  <id>http://holdfire.github.io/</id>
  
  <author>
    <name>holdfire</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>特征提取——因子分析法FA</title>
    <link href="http://holdfire.github.io/2019/11/12/ml-reduceDimension-FA/"/>
    <id>http://holdfire.github.io/2019/11/12/ml-reduceDimension-FA/</id>
    <published>2019-11-11T17:37:20.000Z</published>
    <updated>2019-11-11T17:46:20.891Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://holdfire.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="特征提取" scheme="http://holdfire.github.io/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
      <category term="数据降维" scheme="http://holdfire.github.io/tags/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>特征提取——等容特征映射IsoMap</title>
    <link href="http://holdfire.github.io/2019/11/12/ml-reduceDimension-ISOmap/"/>
    <id>http://holdfire.github.io/2019/11/12/ml-reduceDimension-ISOmap/</id>
    <published>2019-11-11T17:37:20.000Z</published>
    <updated>2019-11-11T17:53:24.482Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  等容特征映射(Isometric feature mapping, IsoMap)的基本思想是：当样本在高维空间中按照某种复杂结构分布时，如果直接计算两个样本点之间的欧氏距离，就损失了样本分布的结构信息。如果样本分布较密集，可以假定样本及的复杂结构在每个小的局部都可以用欧式空间来近似。计算每个样本与乡邻样本之间的欧氏距离；对两个不相邻的样本，寻找一些一系列凉凉相邻的样本构成连接着两个样本的路径，用两个样本间最短路径上的距不距离只和作为两个样本间的距离。这种距离称作测地距离(geodesic distance)。有了样本间的距离矩阵，就可以用度量型MDS等方法映射到低维空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  等容特征映射(Isometric feature mapping, IsoMap)的基本思想是：当样本在高维空间中按照某种复杂
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://holdfire.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="特征提取" scheme="http://holdfire.github.io/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
      <category term="数据降维" scheme="http://holdfire.github.io/tags/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>特征提取——KL变换</title>
    <link href="http://holdfire.github.io/2019/11/12/ml-reduceDimension-KLTransformation/"/>
    <id>http://holdfire.github.io/2019/11/12/ml-reduceDimension-KLTransformation/</id>
    <published>2019-11-11T17:37:20.000Z</published>
    <updated>2019-11-11T17:53:34.906Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://holdfire.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="特征提取" scheme="http://holdfire.github.io/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
      <category term="数据降维" scheme="http://holdfire.github.io/tags/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>特征提取——局部线性嵌入LLE</title>
    <link href="http://holdfire.github.io/2019/11/12/ml-reduceDimension-LLE/"/>
    <id>http://holdfire.github.io/2019/11/12/ml-reduceDimension-LLE/</id>
    <published>2019-11-11T17:37:20.000Z</published>
    <updated>2019-11-11T18:00:40.414Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  局部线性嵌入（Locally Linear Embedding）方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  局部线性嵌入（Locally Linear Embedding）方法&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://holdfire.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="特征提取" scheme="http://holdfire.github.io/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
      <category term="数据降维" scheme="http://holdfire.github.io/tags/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>特征提取——线性判别分析LDA</title>
    <link href="http://holdfire.github.io/2019/11/12/ml-reduceDimension-LDA/"/>
    <id>http://holdfire.github.io/2019/11/12/ml-reduceDimension-LDA/</id>
    <published>2019-11-11T17:37:20.000Z</published>
    <updated>2019-11-11T17:55:30.627Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  线性判别分析（也称作Fisher判别分析，Linear Discriminant Analysis）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  线性判别分析（也称作Fisher判别分析，Linear Discriminant Analysis）&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://holdfire.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="特征提取" scheme="http://holdfire.github.io/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
      <category term="数据降维" scheme="http://holdfire.github.io/tags/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>特征提取——多维尺度法MDS</title>
    <link href="http://holdfire.github.io/2019/11/12/ml-reduceDimension-MDS/"/>
    <id>http://holdfire.github.io/2019/11/12/ml-reduceDimension-MDS/</id>
    <published>2019-11-11T17:37:20.000Z</published>
    <updated>2019-11-11T18:00:32.504Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  多维尺度法（Multidimensional Scaling, MDS）</p><h4 id="2-古典尺度法"><a class="markdownIt-Anchor" href="#2-古典尺度法"></a> 2. 古典尺度法</h4><h4 id="3-度量型mds"><a class="markdownIt-Anchor" href="#3-度量型mds"></a> 3. 度量型MDS</h4><h4 id="4-非度量型mds"><a class="markdownIt-Anchor" href="#4-非度量型mds"></a> 4. 非度量型MDS</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  多维尺度法（Multidimensional Scaling, MDS）&lt;/p&gt;
&lt;h4 id=&quot;2-古典尺度法&quot;&gt;&lt;a cl
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://holdfire.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="特征提取" scheme="http://holdfire.github.io/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
      <category term="数据降维" scheme="http://holdfire.github.io/tags/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>特征提取——奇异值分解SVD</title>
    <link href="http://holdfire.github.io/2019/11/12/ml-reduceDimension-SVD/"/>
    <id>http://holdfire.github.io/2019/11/12/ml-reduceDimension-SVD/</id>
    <published>2019-11-11T17:37:20.000Z</published>
    <updated>2019-11-11T18:00:11.727Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  奇异值分解(Singular Value Decomposition, SVD)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  奇异值分解(Singular Value Decomposition, SVD)&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://holdfire.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="特征提取" scheme="http://holdfire.github.io/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
      <category term="数据降维" scheme="http://holdfire.github.io/tags/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>特征提取——主成分分析PCA</title>
    <link href="http://holdfire.github.io/2019/11/12/ml-reduceDimension-PCA/"/>
    <id>http://holdfire.github.io/2019/11/12/ml-reduceDimension-PCA/</id>
    <published>2019-11-11T17:37:20.000Z</published>
    <updated>2019-11-11T18:00:24.110Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  主成分分析(Principal Components Analysis, PCA)</p><h4 id="2-核主成分分析kpca"><a class="markdownIt-Anchor" href="#2-核主成分分析kpca"></a> 2. 核主成分分析KPCA</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  主成分分析(Principal Components Analysis, PCA)&lt;/p&gt;
&lt;h4 id=&quot;2-核主成分分析k
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://holdfire.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="特征提取" scheme="http://holdfire.github.io/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
      <category term="数据降维" scheme="http://holdfire.github.io/tags/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>bazel编译器</title>
    <link href="http://holdfire.github.io/2019/11/11/compile-bazel/"/>
    <id>http://holdfire.github.io/2019/11/11/compile-bazel/</id>
    <published>2019-11-11T06:59:35.000Z</published>
    <updated>2019-11-11T07:05:03.734Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  编译和移植tensorflow的C/C++源码时，用到bazel这一构建工具。Bazel是一个类似于Make的编译工具，是Google为其内部软件开发的特点量身定制的工具，如今Google使用它来构建内部大多数的软件。Google认为直接用Makefile构建软件速度太慢，结果不可靠，所以构建了一个新的工具叫做Bazel，Bazel的规则层级更高。</p><h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料：</h4><ol><li>tensorflow官网——从源代码编译tensorflow：<a href="https://www.tensorflow.org/install/source" target="_blank" rel="noopener">https://www.tensorflow.org/install/source</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  编译和移植tensorflow的C/C++源码时，用到bazel这一构建工具。Bazel是一个类似于Make的编译工具，是Go
      
    
    </summary>
    
    
      <category term="编译原理" scheme="http://holdfire.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="编译原理" scheme="http://holdfire.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="TensorFlow" scheme="http://holdfire.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow2.0——Bug和Debug日记</title>
    <link href="http://holdfire.github.io/2019/11/11/software-tensorflow2-0-bug/"/>
    <id>http://holdfire.github.io/2019/11/11/software-tensorflow2-0-bug/</id>
    <published>2019-11-11T06:34:17.000Z</published>
    <updated>2019-11-11T06:57:04.294Z</updated>
    
    <content type="html"><![CDATA[<h4 id="bug-20191111"><a class="markdownIt-Anchor" href="#bug-20191111"></a> BUG #20191111</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">背景信息：[window10，64位，python3.7，tensorflow2.0，cpu版]</span><br><span class="line">Warning 警告信息如下：</span><br><span class="line">Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2</span><br></pre></td></tr></table></figure><p>  出现上述警告，是因为安装的tensorflow版本不对。我的CPU支持AVX2拓展，但我安装的TensorFlow不能编译使用。<br />  除了通常的逻辑和算术运算，现代CPU提供了许多低级指令，称为拓展，例如：SSE2,SSE4,AVX,AVX2。高级矢量拓展（AVX）是英特尔在2008年3月提出的英特尔和AMD微处理器的x86指令集体系结构的扩展，英特尔首先通过Sandy Bridge处理器在2011年第一季度推出，随后由AMD推出Bulldozer处理器在2011年第三季度.AVX提供了新功能，新指令和新编码方案。 特别是，AVX引入了融合乘法累加（FMA）操作，加速了线性代数计算，即点积，矩阵乘法，卷积等。几乎所有机器学习训练都涉及大量这些操作，因此将会支持AVX和FMA的CPU（最高达300％）更快。该警告指出您的CPU确实支持AVX。<br />  由于tensorflow默认分布是在没有CPU扩展的情况下构建的，例如SSE4.1，SSE4.2，AVX，AVX2，FMA等。默认版本（来自pip install tensorflow的版本）旨在与尽可能多的CPU兼容。另一个观点是，即使使用这些扩展名，CPU的速度也要比GPU慢很多，并且期望在GPU上执行中型和大型机器学习培训。</p><h5 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料：</h5><ol><li>上述bug说明：<a href="https://blog.csdn.net/hq86937375/article/details/79696023" target="_blank" rel="noopener">https://blog.csdn.net/hq86937375/article/details/79696023</a></li><li>使用bazel自己编译tensorflow：<a href="https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions" target="_blank" rel="noopener">https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;bug-20191111&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#bug-20191111&quot;&gt;&lt;/a&gt; BUG #20191111&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
      <category term="软件安装" scheme="http://holdfire.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="TensorFlow" scheme="http://holdfire.github.io/tags/TensorFlow/"/>
    
      <category term="深度学习" scheme="http://holdfire.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CUDA编程——快速入门篇</title>
    <link href="http://holdfire.github.io/2019/11/10/cuda-learning1/"/>
    <id>http://holdfire.github.io/2019/11/10/cuda-learning1/</id>
    <published>2019-11-09T17:01:27.000Z</published>
    <updated>2019-11-09T17:51:08.618Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  CUDA(Computer Unified Device Architecture)的中文全称是计算统一设备架构。</p><h4 id="2-gpu架构的特点"><a class="markdownIt-Anchor" href="#2-gpu架构的特点"></a> 2. GPU架构的特点</h4><h5 id="串行计算和并行计算"><a class="markdownIt-Anchor" href="#串行计算和并行计算"></a> 串行计算和并行计算：</h5><p>  首先，高性能计算的关键是利用多核处理器进行并行计算。一个程序可不可以进行并行计算，关键就在于我们要分析出该程序可以拆分出哪几个执行模块，这些执行模块哪些是独立的，哪些又是强依赖强耦合的，独立的模块我们可以试着设计并行计算，充分利用多核处理器的优势进一步加速我们的计算任务，强耦合模块我们就使用串行编程，利用串行+并行的编程思路完成一次高性能计算。</p><h5 id="cpu和gpu的区别"><a class="markdownIt-Anchor" href="#cpu和gpu的区别"></a> CPU和GPU的区别：</h5><p>  首先CPU是专为顺序串行处理而优化的几个核心组成。而GPU则由数以千计的更小、更高效的核心组成，这些核心专门为同时处理多任务而设计，可高效地处理并行任务。也就是，CPU虽然每个核心自身能力极强，处理任务上非常强悍，无奈他核心少，在并行计算上表现不佳；反观GPU，虽然他的每个核心的计算能力不算强，但他胜在核心非常多，可以同时处理多个计算任务，在并行计算的支持上做得很好。<br />  现在的计算机体系架构中，要完成CUDA并行计算，单靠GPU一人之力是不能完成计算任务的，必须借助CPU来协同配合完成一次高性能的并行计算任务。</p><h5 id="异构计算"><a class="markdownIt-Anchor" href="#异构计算"></a> 异构计算：</h5><p>  一般而言，并行部分在GPU上运行，串行部分在CPU运行，这就是异构计算。具体一点，异构计算的意思就是不同体系结构的处理器相互协作完成计算任务。CPU负责总体的程序流程，而GPU负责具体的计算任务，当GPU各个线程完成计算任务后，我们就将GPU那边计算得到的结果拷贝到CPU端，完成一次计算任务。</p><h4 id="2-cuda线程模型"><a class="markdownIt-Anchor" href="#2-cuda线程模型"></a> 2. CUDA线程模型</h4><h5 id="模型的不同层次单元"><a class="markdownIt-Anchor" href="#模型的不同层次单元"></a> 模型的不同层次单元</h5><ul><li>线程thread</li><li>线程块thread block</li><li>grid</li><li>kernel</li></ul><h5 id="sp和sm"><a class="markdownIt-Anchor" href="#sp和sm"></a> SP和SM</h5><p>  SP(Streaming Processor)是最基本的处理单元，也称为CUDA core。最后具体的指令和任务都是在SP上处理的。GPU进行并行计算，就是很多歌SP同时做处理。<br />  多个SP加上其他的一些资源组成SM(Streaming Multiprocessor)，也叫GPU大核。其他资源如：warp schedule, register, shared memory等。SM可以看做GPU的心脏（对比CPU核心），register和shared memory是SM的稀缺资源。CUDA将这些资源分配给所有驻留在SM中的threads。因此，这些有限的资源就使每个SM中的active wraps有非常严格的限制，也就限制了并行能力。每个SM包含的SP数量依据GPU架构而不同，Fermi架构GF100是32个，GF 10X是48个，Kepler架构都是192个，Maxwell都是128个。<br />  简而言之，SP是线程执行的硬件单位，SM中包含多个SP，一个GPU可以有多个SM。</p><h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料：</h4><ol><li>CUDA编程之快速入门： <a href="https://www.cnblogs.com/skyfsm/p/9673960.html" target="_blank" rel="noopener">https://www.cnblogs.com/skyfsm/p/9673960.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  CUDA(Computer Unified Device Architecture)的中文全称是计算统一设备架构。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="计算机体系结构" scheme="http://holdfire.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="CUDA编程" scheme="http://holdfire.github.io/tags/CUDA%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>数值计算——线性代数运算程序</title>
    <link href="http://holdfire.github.io/2019/11/10/numerical-computation-blas/"/>
    <id>http://holdfire.github.io/2019/11/10/numerical-computation-blas/</id>
    <published>2019-11-09T16:22:31.000Z</published>
    <updated>2019-11-09T16:49:29.431Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><h5 id="11-blas和lapack"><a class="markdownIt-Anchor" href="#11-blas和lapack"></a> 1.1 BLAS和LAPACK</h5><p>  基础线性代数子程序(Basic Linear Algebra Subprograms , BLAS)是一个设计基本线性代数操作的数学函数标准，它定义了一组应用程序接口API标准。BLAS一般分为三级，第一级主要完成向量与向量或者向量与标量以及范数之间的运算，第二级主要涉及矩阵与向量之间的操作，第三季主要涉及矩阵于矩阵之间的操作。Netlib用firtran实现了BLAS的这些API接口，得到的库也叫作BLAS。<br />  Netlib还用fortran写了一个线性代数库叫做LAPACK（Linear Algebra Package）,其底层是BLAS，在此基础上定义了很多矩阵和向量高级运算的函数，如矩阵分解、求逆和求奇异值等。该库的运行效率比BLAS库高。为了进行C语言的开发，开发了CBLAS和CLAPACK。</p><h5 id="12-atlas和openblas"><a class="markdownIt-Anchor" href="#12-atlas和openblas"></a> 1.2 atlas和openblas</h5><p>  既然可以将BLAS和LAPACK看作是接口规范，于是开源社区实现了科学计算（矩阵计算）库atlas和openblas。它们都实现了BLAS的全部功能以及LAPACK的部分功能。<br />  Atlas （Automatically Tuned Linear Algebra Software）能根据硬件，在运行时，自动调整运行参数。Openblas在编译时根据目标硬件进行优化，生成运行效率很高的程序或者库。Openblas的优化是在编译时进行的，所以其运行效率一般比atlas要高。但这也决定了openblas对硬件依赖性高，换了机器，可能就要重新编译了。（例如A和B两台机器cpu架构、指令集不一样，操作系统一样，在A下编译的openblas库，在B下无法运行，会出现“非法指令”这样的错误）</p><h5 id="13-mkl和acml"><a class="markdownIt-Anchor" href="#13-mkl和acml"></a> 1.3 MKL和ACML</h5><p>  商业公司对BLAS和LAPACK的实现，有Intel的MKL和AMD的ACML。他们对自己的cpu架构，进行了相关计算过程的优化，实现算法效率也很高。NVIDIA针对其GPU，也推出了cuBLAS，用以在GPU上做矩阵运行。</p><h4 id="2-其他说明"><a class="markdownIt-Anchor" href="#2-其他说明"></a> 2. 其他说明</h4><p>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;h5 id=&quot;11-blas和lapack&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11-blas和
      
    
    </summary>
    
    
      <category term="计算数学" scheme="http://holdfire.github.io/categories/%E8%AE%A1%E7%AE%97%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数值计算" scheme="http://holdfire.github.io/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Python——数组运算numpy</title>
    <link href="http://holdfire.github.io/2019/11/10/python-numpy/"/>
    <id>http://holdfire.github.io/2019/11/10/python-numpy/</id>
    <published>2019-11-09T16:07:44.000Z</published>
    <updated>2019-11-10T20:12:24.922Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><h5 id="12-numpy的array计算为什么快"><a class="markdownIt-Anchor" href="#12-numpy的array计算为什么快"></a> 1.2 Numpy的array计算为什么快？</h5><p>  numpy许多函数使用了基础线性代数子程序(Basic Linear Algebra Subprograms , BLAS)，里面拥有大量已经编写好的关于线性代数运算的程序。一般在windows下使用的是到MKL程序，linux下使用的是OpenBLAS。这些BLAS在每种操作上都进行了高度优化，例如使用AVX向量指令集。（关于BLAS参考本网站另一篇文章：<a href="">数值计算——线性代数运算程序</a>）</p><h4 id="2-numpy教程"><a class="markdownIt-Anchor" href="#2-numpy教程"></a> 2. numpy教程</h4><h5 id="21-创建数组"><a class="markdownIt-Anchor" href="#21-创建数组"></a> 2.1 创建数组</h5><ul><li>np.array操作，np.arange操作，np.linspace操作</li><li>np.zeroes操作，np.ones操作。np.eye操作</li><li>np.random.random操作</li></ul><h5 id="22-数组的加载和保存"><a class="markdownIt-Anchor" href="#22-数组的加载和保存"></a> 2.2 数组的加载和保存</h5><p>  np.save操作和np.load操作</p><h5 id="23-各种变形操作"><a class="markdownIt-Anchor" href="#23-各种变形操作"></a> 2.3 各种变形操作</h5><ul><li>reshape操作，flatten操作，</li><li>concatenate操作，stack操作，split操作</li><li>repeat操作</li><li>其他操作</li></ul><h5 id="24-索引操作"><a class="markdownIt-Anchor" href="#24-索引操作"></a> 2.4 索引操作</h5><ul><li>normal indexing：正规索引，切片得到视图，索引得到复制</li><li>bool indexing</li><li>fancy indexing</li><li>argmax操作</li></ul><h5 id="25-数组的计算"><a class="markdownIt-Anchor" href="#25-数组的计算"></a> 2.5 数组的计算</h5><p>  广播机制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;h5 id=&quot;12-numpy的array计算为什么快&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#12
      
    
    </summary>
    
    
      <category term="编程语言" scheme="http://holdfire.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://holdfire.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>深度学习课程——TensorFlow2.0学习</title>
    <link href="http://holdfire.github.io/2019/11/09/dl-course-tf20-1/"/>
    <id>http://holdfire.github.io/2019/11/09/dl-course-tf20-1/</id>
    <published>2019-11-09T15:43:54.000Z</published>
    <updated>2019-11-11T02:25:25.527Z</updated>
    
    <content type="html"><![CDATA[<center> 第1章 TensorFlow简介与环境搭建 </center>   <h4 id="1-tensorflow简介"><a class="markdownIt-Anchor" href="#1-tensorflow简介"></a> 1. Tensorflow简介</h4><h5 id="tensorflow是什么"><a class="markdownIt-Anchor" href="#tensorflow是什么"></a> TensorFlow是什么？</h5><ul><li>采用数据流图，用于数值计算；</li><li>数据流图：节点是处理数据，边表示节点的依赖关系，边上运输张量；</li><li>节点被分配到各种计算设备上运行；</li></ul><h5 id="tensorflow的特性"><a class="markdownIt-Anchor" href="#tensorflow的特性"></a> TensorFlow的特性：</h5><ul><li>高度的灵活性</li><li>可移植性</li><li>自动求微分</li><li>多语言支持</li></ul><h5 id="tensorflow版本变迁"><a class="markdownIt-Anchor" href="#tensorflow版本变迁"></a> TensorFlow版本变迁：</h5><ul><li>201704：集成了keras</li><li>201708：添加了estimator</li><li>201711：添加了Eager execution和TensorFlow Lite（对移动端支持）</li><li>201803：推出了TF Hub，TensorFlow.js和Tensorflow Extended</li><li>201805: 支持Cloud TPU模块与管道</li><li>201806：新的分布式策略API，概率编程工具TensorFlow Probability</li><li>201808：Cloud Big Table集成</li><li>201810：侧重于可用性的API改进</li><li>2019： TensorFlow2.0发布</li></ul><h5 id="tensorflow10特性介绍"><a class="markdownIt-Anchor" href="#tensorflow10特性介绍"></a> TensorFlow1.0特性介绍</h5><ul><li>加入了XLA支持——Accelerate Linear Algebra：提升训练速度58倍</li><li>引入更高级API——tf.keras/tf.layers/tf.metrics/tf.losses</li><li>TensorFlow调试器tensorflow debugger</li><li>支持Docker镜像，引入tensorflow serving服务</li></ul><h5 id="tensorflow20主要特性"><a class="markdownIt-Anchor" href="#tensorflow20主要特性"></a> TensorFlow2.0主要特性</h5><ul><li>使用tf.keras和eager model进行更简单的模型构建</li><li>鲁棒的跨平台模型部署</li><li>keras功能API和子类API，允许差UN感觉爱你复杂的拓扑结构；</li><li>自定义训练逻辑，使用tf.GradientTape和tf。custom_gradient进行更细粒度的控制；</li><li>低层API自始至终可以与高层结合使用，完全的可定制；</li><li>高级拓展：Ragged Tensors, Tensor2Tensor；</li></ul><h5 id="tensorflow20的开发流程"><a class="markdownIt-Anchor" href="#tensorflow20的开发流程"></a> TensorFlow2.0的开发流程</h5><ul><li>使用tf.data加载数据(下载，划分，尺寸，归一化，获取batch)；</li><li>使用tf.keras构建模型，也可以使用premade estimator来验证模型；(用Sequential构建模型，compile设置模式，)<ul><li>使用tensorflow hub进行迁移学习</li></ul></li><li>使用eager mode进行运行和调试；</li><li>使用分发策略来进行分布式训练；（fit和evaluate）</li><li>导出到SavedModel；</li><li>使用Tesnsoflow Server, Tensorflow Lite, Tensorflow.js部署模型（predict）</li></ul><h4 id="2-tensorflow和pytorch的区别"><a class="markdownIt-Anchor" href="#2-tensorflow和pytorch的区别"></a> 2. Tensorflow和Pytorch的区别</h4><p>  在Tensorflow1.0的版本中添加tf.enable_eager_mode，即打开了动态图模式，就可以按照tf2.0的方式去构建动态图了。而tf2.0构建动态图的方法和pytorch基本一样。下面从4个方面比较二者的区别：</p><ul><li>入门掌握的时间</li><li>图的创建和调试</li><li>全面性</li><li>序列化与部署</li></ul><h5 id="21-入门掌握时间"><a class="markdownIt-Anchor" href="#21-入门掌握时间"></a> 2.1 入门掌握时间</h5><p>  Tensorflow1.版本是静态图（没有eager mode的情况下就是静态图），需要额外学习很多概念：图，回话，变量，占位符等，还要写很多样板代码。<br />  Tensorflow2.0的版本的eager mode默认是打开的，使用的是动态图（运行过程中可以更改的图）。eager mode避免1.0的缺点，直接集成在python中。<br />  Pytorch构建的模型是动态图。Numpy的拓展，直接集成在python中。</p><h5 id="22-静态图和动态图"><a class="markdownIt-Anchor" href="#22-静态图和动态图"></a> 2.2 静态图和动态图</h5><p>  静态图的结构一旦确定后就不能改变，其优点是效率高。<br />  动态图的特点是调试容易。<br />  tf1.0创建的是静态图，难以调试，学习tfdbg调试。tf2.0和pytorch创建的是动态图，使用python自带的调试工具。</p><h5 id="23-全面性"><a class="markdownIt-Anchor" href="#23-全面性"></a> 2.3 全面性</h5><p>  pytorch缺少：</p><ul><li>沿维度翻转向量(np.flip, np.flipud, np.fliplr)</li><li>检查无穷与非数值张量(np.is_nan, np.is_inf)</li><li>快速傅里叶变换(np.fft)</li></ul><h5 id="24-序列化与部署"><a class="markdownIt-Anchor" href="#24-序列化与部署"></a> 2.4 序列化与部署：</h5><p>Tensorflow支持更加广泛：图保存为protocol buffer，跨平台，跨语言<br />Pytorch支持比较简单</p><h4 id="3-tensorflow环境配置"><a class="markdownIt-Anchor" href="#3-tensorflow环境配置"></a> 3. Tensorflow环境配置</h4><h5 id="31-本地配置"><a class="markdownIt-Anchor" href="#31-本地配置"></a> 3.1 本地配置</h5><p>  注意：如果是安装GPU版本tf，需要逐次安装：显卡驱动–&gt;CUDA–&gt;CUDNN</p><h5 id="32-云端配置"><a class="markdownIt-Anchor" href="#32-云端配置"></a> 3.2 云端配置</h5><p>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt; 第1章 TensorFlow简介与环境搭建 &lt;/center&gt;   
&lt;h4 id=&quot;1-tensorflow简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-tensorflow简介&quot;&gt;&lt;/a&gt; 1. Tensorflow简介
      
    
    </summary>
    
    
      <category term="深度学习" scheme="http://holdfire.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TensorFlow" scheme="http://holdfire.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>dl-AndrewNGDL-chapter1</title>
    <link href="http://holdfire.github.io/2019/11/08/dl-AndrewNGdl-chapter1/"/>
    <id>http://holdfire.github.io/2019/11/08/dl-AndrewNGdl-chapter1/</id>
    <published>2019-11-08T11:44:44.000Z</published>
    <updated>2019-11-11T08:06:22.905Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux——文件系统挂载</title>
    <link href="http://holdfire.github.io/2019/11/08/linux-file-mount/"/>
    <id>http://holdfire.github.io/2019/11/08/linux-file-mount/</id>
    <published>2019-11-08T10:23:16.000Z</published>
    <updated>2019-11-08T10:26:11.658Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://holdfire.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://holdfire.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows——环境变量path</title>
    <link href="http://holdfire.github.io/2019/11/08/windows-environment-path/"/>
    <id>http://holdfire.github.io/2019/11/08/windows-environment-path/</id>
    <published>2019-11-08T09:10:52.000Z</published>
    <updated>2019-11-08T09:15:07.395Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  windows环境变量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  windows环境变量&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://holdfire.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Windows" scheme="http://holdfire.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows——cmd命令</title>
    <link href="http://holdfire.github.io/2019/11/08/windows-cmd-commands/"/>
    <id>http://holdfire.github.io/2019/11/08/windows-cmd-commands/</id>
    <published>2019-11-08T09:04:34.000Z</published>
    <updated>2019-11-08T10:25:23.434Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1简介"><a class="markdownIt-Anchor" href="#1简介"></a> 1.简介</h4><h5 id="11-cmd命令解释器"><a class="markdownIt-Anchor" href="#11-cmd命令解释器"></a> 1.1 cmd命令解释器</h5><p>  cmd命令行解释器是一个单独的软件程序，它可在用户和操作系统之间提供直接的通讯。命令行解释器是解释器的一种，用于对命令行进行解释执行。<br />  cmd.exe命令行解释器环境由确定命令行解释器和操作系统行为的变量进行定义。可以使用两种类型的环境变量（系统和局部）来定义命令行解释器环境或整个操作系统环境的行为。系统环境变量定义全局操作系统环境的行为。局部环境变量定义Cmd.exe当前实例环境的行为。</p><h5 id="12-cmd可执行程序的类型及存放位置"><a class="markdownIt-Anchor" href="#12-cmd可执行程序的类型及存放位置"></a> 1.2 cmd可执行程序的类型及存放位置</h5><p>  以dos系统而言，可执行程序大约可以细分为五类，依照执行优先级由高到低排列如下。其中，内部系统命令存放在。可执行程序在当前目和环境变量下进行搜索。</p><ul><li>（1）DOSKEY宏命令（预先驻留内存）</li><li>（2）COMMAND.COM中的内部命令（根据内存的环境随时进驻内存）</li><li>（3）以com为扩展名的可执行程序（<a href="http://xn--command-ed9q.com" target="_blank" rel="noopener">由command.com</a> 直接载入内存）</li><li>（4）以exe位扩展名的可执行程序（<a href="http://xn--command-ed9q.com" target="_blank" rel="noopener">由command.com</a> 重定位后载入内存）</li><li>（5）以bat位扩展名的批处理程序（<a href="http://xn--command-ed9q.com" target="_blank" rel="noopener">由command.com</a> 解释分析，根据其内容按优先级顺序调用第2，3，4，5种可执行程序，分析一行，执行一行，文件本身不载入内存）</li></ul><h5 id="13-执行命令时的搜索顺序"><a class="markdownIt-Anchor" href="#13-执行命令时的搜索顺序"></a> 1.3 执行命令时的搜索顺序</h5><p>（1）如果该命令不带后缀</p><ul><li>首先在无后缀的系统命令中搜索；</li><li>然后在当前目录中查找该命令+.exe、.msc、.bat等后缀的可执行文件或批处理文件；</li><li>在环境变量那些目录中按上一条的规则搜索；<br />（2）如果该命令带后缀</li><li>首先在当前目录中搜索该文件，若存在，如果该文件是一个可执行文件或批处理文件，则执行之，如果是其他一般文件则用与该类型文件关联的默认程序打开它；</li><li>若当前目录不存在该文件,则在当前目录中查找是否存在以该文件名+可执行文件或批处理文件后缀（.exe、.bat、.msc等）命名的文件，如果找到了则执行之;</li><li>如果在当前目录中上述两种情况都未找到，才在环境变量所设置的那些目录中按上述顺序搜寻。先是按cmd命令所给的准确文件名查找，如果有，是程序或批处理则执行，是其它文件就用默认程序打开；</li><li>如果在环境变量目录中未找到该文件，再在环境变量目录中查找是否存在该文件名+可执行文件或批处理文件后缀（.exe、.bat、.msc等）的文件，如果找到了则执行之。</li><li>如果还是没有，则只好报错，该命令 is not recognised as an internal or external command, operable program or batch file.<br />（3）如果cmd命令中带路径，很明显只在指定目录中寻找文件，而不会到环境变量中去找，如果文件名不带后缀，则跟第一种情况一样，在指定目录中寻找这个名称的可执行文件或批处理文件执行，找不到报错；如果带后缀，若存在，则执行或用默认程序打开，若不存在，寻找该文件名+可执行文件或批处理文件后缀的文件来执行，找不到报错。</li></ul><h4 id="2-内置命令"><a class="markdownIt-Anchor" href="#2-内置命令"></a> 2. 内置命令</h4><h5 id="21-文件和目录相关操作"><a class="markdownIt-Anchor" href="#21-文件和目录相关操作"></a> 2.1 文件和目录相关操作</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd dir                   <span class="comment"># 切换到该目录下</span></span><br><span class="line">mkdir dir                <span class="comment"># 创建新目录</span></span><br></pre></td></tr></table></figure><h5 id="22-网络相关"><a class="markdownIt-Anchor" href="#22-网络相关"></a> 2.2 网络相关</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipcofig                  # 查看当前IP配置</span><br><span class="line">ping 域名/IP地址          # 查看网络连接是否正常</span><br></pre></td></tr></table></figure><h5 id="23-文件搜索相关"><a class="markdownIt-Anchor" href="#23-文件搜索相关"></a> 2.3 文件搜索相关</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find / -name file1        # 从 &apos;/&apos; 开始进入根文件系统搜索文件和目录</span><br><span class="line">find / -name \*.rpm       # 搜索以&apos;.rpm&apos;结尾的文件并定义其权限</span><br><span class="line">locate \*.ps              # 寻找以 &apos;.ps&apos; 结尾的文件 - 先运行 &apos;updatedb&apos; 命令</span><br><span class="line">where command             # 查找该命令所在路径</span><br><span class="line">whereis halt              # 显示一个二进制文件、源码或man的位置</span><br><span class="line">which halt                # 显示一个二进制文件或可执行文件的完整路径</span><br></pre></td></tr></table></figure><h4 id="3-概念区别"><a class="markdownIt-Anchor" href="#3-概念区别"></a> 3. 概念区别</h4><h5 id="31-shell的定义"><a class="markdownIt-Anchor" href="#31-shell的定义"></a> 3.1 Shell的定义</h5><p>  操作系统可以分成核心（kernel）和Shell（外壳）两部分，其中，Shell是操作系统与外部的主要接口，位于操作系统的外层，为用户提供与操作系统核心沟通的途径。Shell是一个命令解释器(也是一种应用程序)，处于内核和用户之间，负责把用户的指令传递给内核并且把执行结果回显给用户。同时，shell也可以作为一门强大的编程语言。<br />  Shell分为图形界面shell和命令行shell两大类，如windows的资源管理器explorer.exe和cmd命令窗口，linux系统中的bash。</p><h5 id="32-cmd和文件资源管理器"><a class="markdownIt-Anchor" href="#32-cmd和文件资源管理器"></a> 3.2 cmd和文件资源管理器</h5><p>  在windows系统中见到的桌面即explorer.exe（文件资源管理器）是 <strong><font color="red">图形shell</font></strong>，而cmd就是 <strong><font color="red">命令行shell</font></strong>。</p><h5 id="33-cmd和dos"><a class="markdownIt-Anchor" href="#33-cmd和dos"></a> 3.3 cmd和dos</h5><p>  dos本身是一个系统，这是cmd与dos的最大区别：一个只是接口、一个是操作系统。只是cmd中的某些命令和dos中的命令相似，因此很多人把二者混为一谈。cmd属于windows系统的一部分，dos本身就是一个系统，在dos系统下可以删除，修复windows系统，而在cmd下则不行。</p><h5 id="34-cmd和bash"><a class="markdownIt-Anchor" href="#34-cmd和bash"></a> 3.4 cmd和bash</h5><p>  bash是Linux和Unix下的shell，如果真的想试用，可以在MS windows下安装Cygwin环境，然后再在其下使用。 这时需要注意，Cygwin环境下跟真实的Linux或Unix是有区别的，一些命令会运行不正常。最直接的体验，还是使用Linux来得贴心，几乎可以做任何事情。如果想在MS Windows下使用Shell，建议还是使用微软的PowerShell，它能提供给你操作MS windows的完全功能。</p><h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料：</h4><ol><li>cmd命令搜索顺序：<a href="https://www.cnblogs.com/idisposable/p/5137808.html" target="_blank" rel="noopener">https://www.cnblogs.com/idisposable/p/5137808.html</a></li><li>shell，dos，cmd和脚本语言：<a href="https://www.cnblogs.com/lishanyang/p/9224988.html" target="_blank" rel="noopener">https://www.cnblogs.com/lishanyang/p/9224988.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1简介&quot;&gt;&lt;/a&gt; 1.简介&lt;/h4&gt;
&lt;h5 id=&quot;11-cmd命令解释器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11-cmd命令解释器&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://holdfire.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Windows" scheme="http://holdfire.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Python——conda和Anaconda介绍</title>
    <link href="http://holdfire.github.io/2019/11/08/python-anaconda/"/>
    <id>http://holdfire.github.io/2019/11/08/python-anaconda/</id>
    <published>2019-11-08T07:20:56.000Z</published>
    <updated>2019-11-10T20:29:33.985Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h4&gt;
&lt;p&gt;  &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="编程语言" scheme="http://holdfire.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://holdfire.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>编译原理——gcc,g++,make和cmake的区别</title>
    <link href="http://holdfire.github.io/2019/11/08/complie-make-cmake/"/>
    <id>http://holdfire.github.io/2019/11/08/complie-make-cmake/</id>
    <published>2019-11-07T18:32:53.000Z</published>
    <updated>2019-11-09T18:24:29.750Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-gcc和g的区别"><a class="markdownIt-Anchor" href="#1-gcc和g的区别"></a> 1. gcc和g++的区别</h4><p>  二者的区别在于：<br />（1）对于.c的文件，gcc把它当成是c程序，g<ins>当做是c</ins>程序；对于.cpp的文件，两者都会认为是c<ins>程序。<br />（2）编译可以用gcc或g</ins>，链接可以用gcc-lstdc<ins>或者g</ins>。<br />（3）如果后缀为.C的文件定义了_cplusplus宏，gcc编译器认为该宏是未定义的，否则就是已定义的。<br />（4）无论是gcc还是g++，当源文件中用extern &quot;C&quot;时，都是以C的命名方式来为symbol命名的；否则，都以c<ins>的方式命名。<br />（5）在编译阶段，g</ins>是调用gcc的。</p><h4 id="2-make和cmake的区别"><a class="markdownIt-Anchor" href="#2-make和cmake的区别"></a> 2. make和cmake的区别</h4><p>  但如果源文件太多，一个个编译会太麻烦。于是人们设计了一个类似批处理的程序来来批量编译源文件，于是就有了make工具，但你需要编写一个规则文件，make依据它来批处理编译，这个文件就是<strong>makefile</strong>。所以编写makefile也是一个程序员所必备的技能。<br />  对于一个大型工程，编写makefile是一件复杂的事。于是人们又设计了一个读入所有源文件后，自动生成makefile的工具，这就是cmake，它能够输出makefile或者project文件。但是程序员还是要编写<strong>cmakefile</strong>，它是cmake所依据的规则。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-gcc和g的区别&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-gcc和g的区别&quot;&gt;&lt;/a&gt; 1. gcc和g++的区别&lt;/h4&gt;
&lt;p&gt;  二者的区别在于：&lt;br /&gt;
（1）对于.c的文件，gcc把它当成是c程序，g&lt;ins
      
    
    </summary>
    
    
      <category term="编译原理" scheme="http://holdfire.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="编译原理" scheme="http://holdfire.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="C++" scheme="http://holdfire.github.io/tags/C/"/>
    
  </entry>
  
</feed>
